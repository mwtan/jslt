/* Generated By:JJTree&JavaCC: Do not edit this line. JsltParserConstants.java */
package com.schibsted.spt.data.jslt.parser;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JsltParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NULL = 6;
  /** RegularExpression Id. */
  int INTEGER = 7;
  /** RegularExpression Id. */
  int DECIMAL = 8;
  /** RegularExpression Id. */
  int STRING = 9;
  /** RegularExpression Id. */
  int LBRACKET = 10;
  /** RegularExpression Id. */
  int RBRACKET = 11;
  /** RegularExpression Id. */
  int COMMA = 12;
  /** RegularExpression Id. */
  int COLON = 13;
  /** RegularExpression Id. */
  int LCURLY = 14;
  /** RegularExpression Id. */
  int RCURLY = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int OR = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int DOT = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int LPAREN = 23;
  /** RegularExpression Id. */
  int RPAREN = 24;
  /** RegularExpression Id. */
  int LET = 25;
  /** RegularExpression Id. */
  int ASSIGN = 26;
  /** RegularExpression Id. */
  int EQUALS = 27;
  /** RegularExpression Id. */
  int UNEQUALS = 28;
  /** RegularExpression Id. */
  int BIGOREQ = 29;
  /** RegularExpression Id. */
  int BIGGER = 30;
  /** RegularExpression Id. */
  int SMALLER = 31;
  /** RegularExpression Id. */
  int SMALLOREQ = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int STAR = 35;
  /** RegularExpression Id. */
  int SLASH = 36;
  /** RegularExpression Id. */
  int FOR = 37;
  /** RegularExpression Id. */
  int DEF = 38;
  /** RegularExpression Id. */
  int IMPORT = 39;
  /** RegularExpression Id. */
  int AS = 40;
  /** RegularExpression Id. */
  int IDENT = 41;
  /** RegularExpression Id. */
  int PIDENT = 42;
  /** RegularExpression Id. */
  int VARIABLE = 43;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 44;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 45;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"null\"",
    "<INTEGER>",
    "<DECIMAL>",
    "<STRING>",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\":\"",
    "\"{\"",
    "\"}\"",
    "\"true\"",
    "\"false\"",
    "\"or\"",
    "\"and\"",
    "\".\"",
    "\"if\"",
    "\"else\"",
    "\"(\"",
    "\")\"",
    "\"let\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"for\"",
    "\"def\"",
    "\"import\"",
    "\"as\"",
    "<IDENT>",
    "<PIDENT>",
    "<VARIABLE>",
    "<SINGLE_LINE_COMMENT>",
    "<BLOCK_COMMENT>",
    "\";\"",
  };

}
